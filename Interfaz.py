# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Interfaz.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from os import linesep, truncate
from GestorSimulacion import GestorSimulacion
from GestorListasSimulaciones import GestorListaSimulacion
from GestorSimulacion import *
from tkinter import Widget
from Gestor import Gestor
from PyQt5 import QtCore, QtGui, QtWidgets
from GestorListaProductosSimular import GestorListaProductosSimular
from GestorListaProductos import GestorListaProductos

gestor = Gestor()
gestor2 = GestorListaProductos()
ges = GestorListaSimulacion()

contadorActualizar = 0 
class Ui_Ensamblador(object):
    def setupUi(self, Ensamblador):
        Ensamblador.setObjectName("Ensamblador")
        Ensamblador.resize(1163, 655)
        Ensamblador.setAnimated(True)
        self.centralwidget = QtWidgets.QWidget(Ensamblador)
        self.centralwidget.setObjectName("centralwidget")
        self.lblProductos = QtWidgets.QLabel(self.centralwidget)
        self.lblProductos.setGeometry(QtCore.QRect(20, 40, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Bodoni MT")
        font.setPointSize(16)
        self.lblProductos.setFont(font)
        self.lblProductos.setObjectName("lblProductos")
        self.comboProductos = QtWidgets.QComboBox(self.centralwidget)
        self.comboProductos.setGeometry(QtCore.QRect(120, 50, 211, 31))
        self.comboProductos.setObjectName("comboProductos")
        self.tableLineas = QtWidgets.QTableWidget(self.centralwidget)
        self.tableLineas.setGeometry(QtCore.QRect(370, 80, 781, 421))
        self.tableLineas.setObjectName("tableView")
        self.tableLineas.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableLineas.setDragDropOverwriteMode(False)
        self.tableLineas.verticalHeader().setVisible(False)
        self.tableLineas.horizontalHeader().setDefaultAlignment(QtCore.Qt.AlignmentFlag.AlignCenter|QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(10, 530, 551, 51))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(50, 150, 256, 341))
        self.listWidget.setObjectName("listWidget")
        self.lblTabla = QtWidgets.QLabel(self.centralwidget)
        self.lblTabla.setGeometry(QtCore.QRect(660, 20, 201, 41))
        self.btnSimular = QtWidgets.QPushButton(self.centralwidget)
        self.btnSimular.setGeometry(QtCore.QRect(400,20,121,51))
        self.btnSimular.setObjectName("Simular")
        self.btnSimular.clicked.connect(self.Simular)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblTabla.setFont(font)
        self.lblTabla.setObjectName("lblTabla")
        self.lblComponentes = QtWidgets.QLabel(self.centralwidget)
        self.lblComponentes.setGeometry(QtCore.QRect(60, 100, 231, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblComponentes.setFont(font)
        self.lblComponentes.setObjectName("lblComponentes")
        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(930, 530, 171, 61))
        self.lcdNumber.setObjectName("lcdNumber")
        self.lblTiempoEnsamble = QtWidgets.QLabel(self.centralwidget)
        self.lblTiempoEnsamble.setGeometry(QtCore.QRect(630, 540, 311, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblTiempoEnsamble.setFont(font)
        self.lblTiempoEnsamble.setObjectName("lblTiempoEnsamble")
        self.segundos = QtWidgets.QLabel(self.centralwidget)
        self.segundos.setGeometry(QtCore.QRect(1110, 560, 21, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.segundos.setFont(font)
        self.segundos.setObjectName("segundos")
        Ensamblador.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Ensamblador)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1163, 21))
        self.menubar.setObjectName("menubar")
        self.menuOpciones = QtWidgets.QMenu(self.menubar)
        self.menuOpciones.setObjectName("menuOpciones")
        self.menuArchivo = QtWidgets.QMenu(self.menubar)
        self.menuArchivo.setObjectName("menuArchivo")
        self.menuSalir = QtWidgets.QMenu(self.menubar)
        self.menuSalir.setObjectName("menuSalir")
        Ensamblador.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Ensamblador)
        self.statusbar.setObjectName("statusbar")
        Ensamblador.setStatusBar(self.statusbar)
        self.actionActualizar = QtWidgets.QAction(Ensamblador)
        self.actionActualizar.setObjectName("actionActualizar")
        self.actionActualizar.triggered.connect(self.Actualizar)
        self.actionLimpiar = QtWidgets.QAction(Ensamblador)
        self.actionLimpiar.setObjectName("actionLimpiar")
        self.actionCargar_Maquina = QtWidgets.QAction(Ensamblador)
        self.actionCargar_Maquina.setObjectName("actionCargar_Maquina")
        self.actionCargar_Simulacion = QtWidgets.QAction(Ensamblador)
        self.actionCargar_Simulacion.setObjectName("actionCargar_Simulacion")
        self.actionSalida_Simulacion = QtWidgets.QAction(Ensamblador)
        self.actionSalida_Simulacion.setObjectName("actionSalida_Simulacion")
        self.actionReporte_Simulacion_HTML = QtWidgets.QAction(Ensamblador)
        self.actionReporte_Simulacion_HTML.setObjectName("actionReporte_Simulacion_HTML")
        self.actionReporte_de_secuencia = QtWidgets.QAction(Ensamblador)
        self.actionReporte_de_secuencia.setObjectName("actionReporte_de_secuencia")
        self.menuOpciones.addAction(self.actionActualizar)
        self.menuOpciones.addAction(self.actionLimpiar)
        self.menuArchivo.addAction(self.actionCargar_Maquina)
        self.menuArchivo.addAction(self.actionCargar_Simulacion)
        self.menuArchivo.addAction(self.actionSalida_Simulacion)
        self.menuArchivo.addAction(self.actionReporte_Simulacion_HTML)
        self.menuArchivo.addAction(self.actionReporte_de_secuencia)
        self.menubar.addAction(self.menuArchivo.menuAction())
        self.menubar.addAction(self.menuOpciones.menuAction())
        self.menubar.addAction(self.menuSalir.menuAction())
        self.actionCargar_Maquina.triggered.connect(gestor.CargarArchivoConfig)
        self.actionCargar_Simulacion.triggered.connect(gestor.CargarArchivoSimulacion)
        #self.actionLimpiar.triggered.connect()
        self.retranslateUi(Ensamblador)
        QtCore.QMetaObject.connectSlotsByName(Ensamblador)

    def retranslateUi(self, Ensamblador):
        _translate = QtCore.QCoreApplication.translate
        Ensamblador.setWindowTitle(_translate("Ensamblador", "Ensamblador"))
        self.lblProductos.setText(_translate("Ensamblador", "Productos:"))
        self.lblTabla.setText(_translate("Ensamblador", "Tabla de Simulación"))
        self.lblComponentes.setText(_translate("Ensamblador", "Componentes a utilizar"))
        self.lblTiempoEnsamble.setText(_translate("Ensamblador", "Tiempo óptimo de ensamblaje: "))
        self.segundos.setText(_translate("Ensamblador", "S"))
        self.menuOpciones.setTitle(_translate("Ensamblador", "Opciones"))
        self.menuArchivo.setTitle(_translate("Ensamblador", "Archivo"))
        self.menuSalir.setTitle(_translate("Ensamblador", "Salir"))
        self.actionActualizar.setText(_translate("Ensamblador", "Actualizar"))
        self.actionLimpiar.setText(_translate("Ensamblador", "Limpiar Interfaz"))
        self.actionCargar_Maquina.setText(_translate("Ensamblador", "Cargar Maquina"))
        self.actionCargar_Simulacion.setText(_translate("Ensamblador", "Cargar Simulacion"))
        self.actionSalida_Simulacion.setText(_translate("Ensamblador", "Salida Simulacion"))
        self.actionReporte_Simulacion_HTML.setText(_translate("Ensamblador", "Reporte Simulacion HTML"))
        self.actionReporte_de_secuencia.setText(_translate("Ensamblador", "Reporte de secuencia"))
        self.btnSimular.setText(_translate("Ensamblador", "Simular"))


    def Actualizar(self):
        global contadorActualizar
        if contadorActualizar == 0 :
            self.addCombo()
            self.addListaComponentes()
            self.addTablaLineas()
            contadorActualizar+=1
        else:
            self.addListaComponentes()
            self.addTablaLineas()
            self.addTablaLineas()

    def addCombo(self):
        #print(len(gestor2.cabeza))
        for i in range(0, gestor.TamanoListaProductosMaquina):
            valor = gestor.addCombo(i)
            self.comboProductos.addItem(valor)


    def addListaComponentes(self):
        self.listWidget.clear()
        texto = self.comboProductos.currentText()
        if texto != None:
            print("si da rango: "+ str(gestor.cantidadListaComponentes(texto)))
            for i in range(0, gestor.cantidadListaComponentes(texto)+1):
                valor = gestor.Lista2.addListaComponentes(texto, i)
                self.listWidget.addItem('componente '+valor)
        else: 
            print('el combobox esta vacio')
    
    
    def addTablaLineas(self):
        self.tableLineas.setColumnCount(gestor.cabeza.CantidadLineas+1)
        texto = self.comboProductos.currentText()
        if texto !=None:
            print("si da rango: "+ str(gestor.cantidadListaLineas(texto)))
            self.tableLineas.setHorizontalHeaderItem(0,QtWidgets.QTableWidgetItem('Tiempo'))
            print("al menos inserta fila    ")
            for i in range(0, 1):
                for j in range(1, self.tableLineas.columnCount()):
                    valor = 'L'+str(j)
                    
                    self.tableLineas.setHorizontalHeaderItem(j,QtWidgets.QTableWidgetItem(valor))
                print("paso")
                   
    def Simular(self):
        
        texto = self.comboProductos.currentText()
        gestor.SimularProducto(texto)
        cantidadListaLineas = gestor.cantidadListaLineas(texto)
        tamaCol = self.tableLineas.columnCount()
        producto = self.comboProductos.currentText()
        contadorFila = 0
        ComponenteMasGrande = gestor.ComponenteMasGrande(producto,cantidadListaLineas) 
        
        contadorMovimientos=0
        ComponenteActual = 0
        contadorEnsamblados=0
        while  gestor.ultimoNodoEnsamblado!=True:
            LineaEnsamblando = False
            Ensamblado=False
            for i in range(0,cantidadListaLineas):
                Ensamblado = gestor.Ensamblado(producto,i)
                if(Ensamblado == False):
                    Linea = gestor.RetornarLinea(producto,i)
                    ComponenteAEnsamblar = gestor.RetornarComponente(producto,i)
                    posicion = i
                    break
                
            rowPosition = self.tableLineas.rowCount()
            self.tableLineas.insertRow(rowPosition)
                
            if(gestor.Ensambla(producto,ComponenteActual,posicion,Linea)==False and gestor.SeMueve(producto,ComponenteActual,Linea)==True ):    
                self.tableLineas.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("Mueve a comp "+str(ComponenteActual+1)))
                print("se mueve")
                if ComponenteActual < ComponenteMasGrande:
                    ComponenteActual+=1
            elif(gestor.Ensambla(producto,ComponenteActual,posicion,Linea)==True and gestor.SeMueve(producto,ComponenteActual,Linea)==False):
                if(gestor.PuedeEnsamblar(producto,posicion, Linea)==False):
                    self.tableLineas.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("No hace Nada "))
                    print("No hace nada")
                else:
                    self.tableLineas.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("Ensamblando componente "+str(ComponenteActual)))
                    print("ensamblando")
                    if ComponenteActual < ComponenteMasGrande:
                        ComponenteActual+=1
                    contadorEnsamblados+=1
                    gestor.CambiarEstadoEnsamblado(producto,posicion,Linea)
                    LineaEnsamblando = True

            for i in range(1, Linea):
                if LineaEnsamblando!=True:
                    if( gestor.EnsamblaExtra(producto,ComponenteActual,i)==False and gestor.SeMueve(producto,ComponenteActual,i)==True):    
                        self.tableLineas.setItem(rowPosition,i,QtWidgets.QTableWidgetItem("Mueve a comp "+str(ComponenteActual)))
                        print("se mueve")
                    elif(gestor.SeMueve(producto,ComponenteActual,i)==False and gestor.EnsamblaExtra(producto,ComponenteActual,i)==True):
                        if(gestor.PuedeEnsamblarExtra(producto,Linea)==False):
                            self.tableLineas.setItem(rowPosition,i,QtWidgets.QTableWidgetItem("No hace Nada "))
                            print("No hace nada")
                else:
                    self.tableLineas.setItem(rowPosition,i,QtWidgets.QTableWidgetItem("No hace Nada "))
                
            
            for j in range(Linea+1, tamaCol):
                if LineaEnsamblando!=True:
                    if( gestor.EnsamblaExtra(producto,ComponenteActual,j)==False and gestor.SeMueve(producto,ComponenteActual,j)==True):    
                        self.tableLineas.setItem(rowPosition,i,QtWidgets.QTableWidgetItem("Mueve a comp "+str(ComponenteActual)))
                        print("se mueve")
                    elif(gestor.SeMueve(producto,ComponenteActual,j)==False and gestor.EnsamblaExtra(producto,ComponenteActual,j)==True):
                        if(gestor.PuedeEnsamblarExtra(producto,j)==False):
                            self.tableLineas.setItem(rowPosition,j,QtWidgets.QTableWidgetItem("No hace Nada "))
                            print("No hace nada")
                else: 
                    self.tableLineas.setItem(rowPosition,j,QtWidgets.QTableWidgetItem("No hace Nada "))
                
            
            ''''for columnas in range(1,tamaCol):
                
                TiempoEnsamble = gestor.ObtenerTiempoEnsambleLinea(columnas)
                seMueve = gestor.SeMueve(producto,contadorFila,columnas)
                Ensamble = gestor.Ensambla(producto,contadorFila,columnas)
                puedeEnsamblar = gestor.PuedeEnsamblar(producto,columnas)
                #El primer if verifica si se mueve
                if seMueve == True:
                    self.tableLineas.setItem(contadorFila,columnas,QtWidgets.QTableWidgetItem("Mueve a comp "+str(contadorFila+1)))
                elif seMueve == None: 
                    pass
                else:
                    if  Ensamble==True and puedeEnsamblar==False:
                        self.tableLineas.setItem(contadorFila,columnas,QtWidgets.QTableWidgetItem("No hace nada"))
                        print("nada")
                    elif Ensamble==True and puedeEnsamblar==True:
                        self.tableLineas.setItem(contadorFila,columnas,QtWidgets.QTableWidgetItem("Ensamblando comp "+str(contadorFila+1)))
                        print("ensamblandooo")
            
            contadorFila+=1'''
        print('salio del while prrooooo')         
            

