# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Interfaz.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import xml.etree.cElementTree as ET
import time
import webbrowser, os, sys

from ast import Str
from os import linesep, truncate
from GestorSimulacion import GestorSimulacion
from GestorListasSimulaciones import GestorListaSimulacion
from GestorSimulacion import *
from tkinter import Widget
from Gestor import Gestor
from PyQt5 import QtCore, QtGui, QtWidgets
from GestorListaProductosSimular import GestorListaProductosSimular
from GestorListaProductos import GestorListaProductos

gestor = Gestor()
gestor2 = GestorListaProductos()
ges = GestorListaSimulacion()

global headerTableHtml
contadorActualizar = 0 
class Ui_Ensamblador(object):

    def setupUi(self, Ensamblador):
        Ensamblador.setObjectName("Ensamblador")
        Ensamblador.resize(1166, 655)
        Ensamblador.setAnimated(True)
        self.centralwidget = QtWidgets.QWidget(Ensamblador)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1171, 631))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.lblProductos = QtWidgets.QLabel(self.tab)
        self.lblProductos.setGeometry(QtCore.QRect(20, 38, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Bodoni MT")
        font.setPointSize(16)
        self.lblProductos.setFont(font)
        self.lblProductos.setObjectName("lblProductos")
        self.comboProductos = QtWidgets.QComboBox(self.tab)
        self.comboProductos.setGeometry(QtCore.QRect(120, 50, 211, 31))
        self.comboProductos.setObjectName("comboProductos")
        self.comboProductos.currentTextChanged.connect(self.Actualizar)
        self.tableLineas = QtWidgets.QTableWidget(self.tab)
        self.tableLineas.setGeometry(QtCore.QRect(360, 80, 761, 421))
        self.tableLineas.setObjectName("tableView")
        self.tableLineas.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableLineas.setDragDropOverwriteMode(False)
        self.tableLineas.verticalHeader().setVisible(False)
        self.tableLineas.horizontalHeader().setDefaultAlignment(QtCore.Qt.AlignmentFlag.AlignCenter|QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.progressBar = QtWidgets.QProgressBar(self.tab)
        self.progressBar.setGeometry(QtCore.QRect(10, 530, 551, 51))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.listWidget = QtWidgets.QListWidget(self.tab)
        self.listWidget.setGeometry(QtCore.QRect(50, 150, 256, 341))
        self.listWidget.setObjectName("listWidget")
        self.lblTabla = QtWidgets.QLabel(self.tab)
        self.lblTabla.setGeometry(QtCore.QRect(660, 20, 201, 41))
        self.btnSimular = QtWidgets.QPushButton(self.tab)
        self.btnSimular.setGeometry(QtCore.QRect(358,20,117,51))
        self.btnSimular.setObjectName("Simular")
        self.btnSimular.clicked.connect(self.Simular1)
        self.btnReporteHTML = QtWidgets.QPushButton(self.tab)
        self.btnReporteHTML.setGeometry(QtCore.QRect(1000,20,121,51))
        self.btnReporteHTML.setObjectName("ReporteHtml")
        self.btnReporteHTML.clicked.connect(self.ReporteIndividual)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblTabla.setFont(font)
        self.lblTabla.setObjectName("lblTabla")
        self.lblComponentes = QtWidgets.QLabel(self.tab)
        self.lblComponentes.setGeometry(QtCore.QRect(60, 100, 231, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblComponentes.setFont(font)
        self.lblComponentes.setObjectName("lblComponentes")
        self.lcdNumber = QtWidgets.QLCDNumber(self.tab)
        self.lcdNumber.setGeometry(QtCore.QRect(930, 530, 171, 61))
        self.lcdNumber.setObjectName("lcdNumber")
        self.lblTiempoEnsamble = QtWidgets.QLabel(self.tab)
        self.lblTiempoEnsamble.setGeometry(QtCore.QRect(630, 540, 311, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblTiempoEnsamble.setFont(font)
        self.lblTiempoEnsamble.setObjectName("lblTiempoEnsamble")
        self.segundos = QtWidgets.QLabel(self.tab)
        self.segundos.setGeometry(QtCore.QRect(1110, 560, 21, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.segundos.setFont(font)
        self.segundos.setObjectName("segundos")
        ## EMPIEZA TAB 2
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.lblProductos_2 = QtWidgets.QLabel(self.tab_2)
        self.lblProductos_2.setGeometry(QtCore.QRect(20, 20, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Bodoni MT")
        font.setPointSize(16)
        self.lblProductos_2.setFont(font)
        self.lblProductos_2.setObjectName("lblProductos_2")
        self.comboProductos_2 = QtWidgets.QComboBox(self.tab_2)
        self.comboProductos_2.setGeometry(QtCore.QRect(180, 30, 171, 31))
        self.comboProductos_2.setObjectName("comboProductos_2")
        self.comboProductos_2.currentTextChanged.connect(self.ActualizarMasivo)
        self.tableLineas2 = QtWidgets.QTableWidget(self.tab_2)
        self.tableLineas2.setGeometry(QtCore.QRect(370, 80, 781, 421))
        self.tableLineas2.setObjectName("tableView")
        self.tableLineas2.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableLineas2.setDragDropOverwriteMode(False)
        self.tableLineas2.verticalHeader().setVisible(False)
        self.tableLineas2.horizontalHeader().setDefaultAlignment(QtCore.Qt.AlignmentFlag.AlignCenter|QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.listWidget_2 = QtWidgets.QListWidget(self.tab_2)
        self.listWidget_2.setGeometry(QtCore.QRect(20, 150, 256, 341))
        self.listWidget_2.setObjectName("listWidget_2")
        self.lblComponentes_2 = QtWidgets.QLabel(self.tab_2)
        self.lblComponentes_2.setGeometry(QtCore.QRect(30, 100, 241, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblComponentes_2.setFont(font)
        self.lblComponentes_2.setObjectName("lblComponentes_2")
        self.lblTabla_2 = QtWidgets.QLabel(self.tab_2)
        self.lblTabla_2.setGeometry(QtCore.QRect(570, 20, 201, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblTabla_2.setFont(font)
        self.lblTabla_2.setObjectName("lblTabla_2")
        self.lblComponentes_2 = QtWidgets.QLabel(self.tab_2)
        self.lblComponentes_2.setGeometry(QtCore.QRect(30, 100, 241, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblComponentes_2.setFont(font)
        self.lblComponentes_2.setObjectName("lblComponentes_2")
        self.lblTiempoEnsamble_2 = QtWidgets.QLabel(self.tab_2)
        self.lblTiempoEnsamble_2.setGeometry(QtCore.QRect(340, 540, 331, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblTiempoEnsamble_2.setFont(font)
        self.lblTiempoEnsamble_2.setObjectName("lblTiempoEnsamble_2")
        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.tab_2)
        self.lcdNumber_2.setGeometry(QtCore.QRect(650, 520, 171, 61))
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        self.pushButton = QtWidgets.QPushButton(self.tab_2)
        self.pushButton.setGeometry(QtCore.QRect(20, 530, 101, 61))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_2.setGeometry(QtCore.QRect(140, 530, 91, 61))
        self.pushButton_2.setObjectName("pushButton_2")
        self.tabWidget.addTab(self.tab, "")
        self.tabWidget.addTab(self.tab_2, "")
        self.lblTiempoEnsamble_2 = QtWidgets.QLabel(self.tab_2)
        self.lblTiempoEnsamble_2.setGeometry(QtCore.QRect(340, 540, 331, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblTiempoEnsamble_2.setFont(font)
        self.lblTiempoEnsamble_2.setObjectName("lblTiempoEnsamble_2")
        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.tab_2)
        self.lcdNumber_2.setGeometry(QtCore.QRect(650, 520, 171, 61))
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        self.pushButton = QtWidgets.QPushButton(self.tab_2)
        self.pushButton.setGeometry(QtCore.QRect(20, 530, 101, 61))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_2.setGeometry(QtCore.QRect(140, 530, 91, 61))
        self.pushButton_2.setObjectName("pushButton_2")  
        #TERMINA TAB 2#
        Ensamblador.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Ensamblador)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1163, 21))
        self.menubar.setObjectName("menubar")
        self.menuOpciones = QtWidgets.QMenu(self.menubar)
        self.menuOpciones.setObjectName("menuOpciones")
        self.menuArchivo = QtWidgets.QMenu(self.menubar)
        self.menuArchivo.setObjectName("menuArchivo")
        self.menuSalir = QtWidgets.QMenu(self.menubar)
        self.menuSalir.setObjectName("menuSalir")
        Ensamblador.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Ensamblador)
        self.statusbar.setObjectName("statusbar")
        Ensamblador.setStatusBar(self.statusbar)
        self.actionActualizar = QtWidgets.QAction(Ensamblador)
        self.actionActualizar.setObjectName("actionActualizar")
        self.actionActualizar.triggered.connect(self.Actualizar)
        self.actionCargar_Maquina = QtWidgets.QAction(Ensamblador)
        self.actionCargar_Maquina.setObjectName("actionCargar_Maquina")
        self.actionCargar_Simulacion = QtWidgets.QAction(Ensamblador)
        self.actionCargar_Simulacion.setObjectName("actionCargar_Simulacion")
        self.menuOpciones.addAction(self.actionActualizar)
        self.menuArchivo.addAction(self.actionCargar_Maquina)
        self.menuArchivo.addAction(self.actionCargar_Simulacion)
        self.menubar.addAction(self.menuArchivo.menuAction())
        self.actionCargar_Maquina.triggered.connect(gestor.CargarArchivoConfig)
        self.actionCargar_Maquina.triggered.connect(self.addCombo)
        self.actionCargar_Simulacion.triggered.connect(gestor.CargarArchivoSimulacion)
        self.actionCargar_Simulacion.triggered.connect(self.addComboMasivo)
        self.pushButton.clicked.connect(self.ReporteMasiva)
        self.pushButton_2.clicked.connect(self.SalidaXMLMasiva)
        
        
        #self.actionLimpiar.triggered.connect()
        self.retranslateUi(Ensamblador)
        QtCore.QMetaObject.connectSlotsByName(Ensamblador)

    def retranslateUi(self, Ensamblador):
        _translate = QtCore.QCoreApplication.translate
        Ensamblador.setWindowTitle(_translate("Ensamblador", "Ensamblador"))
        self.lblProductos.setText(_translate("Ensamblador", "Productos:"))
        self.lblTabla.setText(_translate("Ensamblador", "Tabla de Simulación"))
        self.lblComponentes.setText(_translate("Ensamblador", "Componentes a utilizar"))
        self.lblTiempoEnsamble.setText(_translate("Ensamblador", "Tiempo óptimo de ensamblaje: "))
        self.segundos.setText(_translate("Ensamblador", "S"))
        self.menuOpciones.setTitle(_translate("Ensamblador", "Opciones"))
        self.menuArchivo.setTitle(_translate("Ensamblador", "Archivo"))
        self.menuSalir.setTitle(_translate("Ensamblador", "Salir"))
        self.actionActualizar.setText(_translate("Ensamblador", "Actualizar"))
        self.actionCargar_Maquina.setText(_translate("Ensamblador", "Cargar Maquina"))
        self.actionCargar_Simulacion.setText(_translate("Ensamblador", "Cargar Simulacion"))
        self.btnSimular.setText(_translate("Ensamblador", "Simular"))
        self.btnReporteHTML.setText(_translate("Ensamblador", "Reportes"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Ensamblador", "Individual"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Ensamblador", "Masiva"))
        self.lblProductos_2.setText(_translate("Ensamblador", "Productos a ver:"))
        self.lblComponentes_2.setText(_translate("Ensamblador", "Componentes Utilizados"))
        self.lblTabla_2.setText(_translate("Ensamblador", "Tabla de Simulación"))
        self.lblTiempoEnsamble_2.setText(_translate("Ensamblador", "Tiempo óptimo de ensamblaje: "))
        self.pushButton.setText(_translate("Ensamblador", "Generar Reportes"))
        self.pushButton_2.setText(_translate("Ensamblador", "Salida XML"))

    def Actualizar(self):
        global contadorActualizar
        self.addListaComponentes()
        self.addTablaLineas()
        self.addTablaLineas()
        self.tableLineas.clearContents()
        self.tableLineas.setRowCount(0)
        self.progressBar.setProperty('value',0)
        self.lcdNumber.display('0')

    def addCombo(self):
        #print(len(gestor2.cabeza))
        for i in range(0, gestor.TamanoListaProductosMaquina+1):
            valor = gestor.addCombo(i)
            self.comboProductos.addItem(valor)
            gestor.SimularProducto(valor)

    def addListaComponentes(self):
        self.listWidget.clear()
        texto = self.comboProductos.currentText()
        if texto != None:
            print("si da rango: "+ str(gestor.cantidadListaComponentes(texto)))
            for i in range(0, gestor.cantidadListaComponentes(texto)):
                valor = gestor.Lista2.addListaComponentes(texto, i)
                self.listWidget.addItem('componente '+valor)
        else: 
            print('el combobox esta vacio')
    
    def addTablaLineas(self):
        global headerTableHtml
        self.tableLineas.setColumnCount(gestor.cabeza.CantidadLineas+1)
        texto = self.comboProductos.currentText()
        if texto !=None:
            print("si da rango: "+ str(gestor.cantidadListaLineas(texto)))
            self.tableLineas.setHorizontalHeaderItem(0,QtWidgets.QTableWidgetItem('Tiempo'))
            print("al menos inserta fila    ")
            headerTableHtml = '<th scope="col">Tiempo</th>\n'
                            
            for i in range(0, 1):
                for j in range(1, self.tableLineas.columnCount()):
                    valor = 'L'+str(j)
                    self.tableLineas.setHorizontalHeaderItem(j,QtWidgets.QTableWidgetItem(valor))
                print("paso")
            
    def Simular1(self):
        producto = self.comboProductos.currentText()
        gestor.DeterminarValoresIniciales(producto)
        cantidadListaLineas = gestor.cantidadListaLineas(producto)
        contadorFila = 0
        TerminoSimulacion=False
        ContadorTiempo = 0
        self.progressBar.setProperty("value", 50)
        time.sleep(1.1)
        while  TerminoSimulacion ==False:
            Ensamblando=False
            
            for posicion in range(cantidadListaLineas):
                if contadorFila == 0:
                    
                    ContadorTiempo+=1
                    rowPosition = self.tableLineas.rowCount()
                    self.tableLineas.insertRow(rowPosition)
                    for posicion2 in range(cantidadListaLineas):
                        gestor.LineaOcupadaFalse(producto,gestor.RetornarLinea(producto,posicion2))
                
                
                if Ensamblando==False:
                    Ensamblado = gestor.Ensamblado(producto,posicion)
                    if Ensamblado==False:
                        ComponenteActual = gestor.ObtenerComponenteActual(producto,posicion)
                        ComponenteEnsamblar = gestor.ObtenerComponenteEnsamblar(producto,posicion)
                        Linea = gestor.RetornarLinea(producto,posicion)
                        Ensambla = gestor.Ensambla(producto,posicion)
                        if ComponenteActual==ComponenteEnsamblar:
                            Ensambla=True
                        if Ensambla == False:
                            LineaOcupada = gestor.LineaOcupada(producto,posicion)
                            if ComponenteActual<ComponenteEnsamblar and LineaOcupada!=True:
                                
                                print("Linea "+str(Linea)+" se mueve a componente "+str(ComponenteActual+1))
                                
                                self.tableLineas.setItem(rowPosition,0,QtWidgets.QTableWidgetItem(str(ContadorTiempo)))
                                self.tableLineas.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("Se mueve a componente "+str(ComponenteActual+1)))
                                contadorFila=1
                                gestor.DeclararComponenteActual(producto,posicion,1)
                                gestor.LineaOcupadaTrue(producto,Linea)
                                ComponenteActual+=1
                                if (ComponenteActual)==ComponenteEnsamblar:
                                    gestor.DeclararEnsamble(producto,posicion,True)
                            elif(ComponenteActual>ComponenteEnsamblar and gestor.LineaOcupada(producto,posicion)!=True): ##Este else es de si el compA < CompE
                                print("Linea "+str(Linea)+" se mueve a "+str(ComponenteActual-1))
                                self.tableLineas.setItem(rowPosition,0,QtWidgets.QTableWidgetItem(str(ContadorTiempo)))
                                self.tableLineas.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("Se mueve a componente "+str(ComponenteActual-1)))
                                contadorFila=1
                                gestor.DeclararComponenteActual(producto,posicion,-1)
                                gestor.LineaOcupadaTrue(producto,Linea)
                                ComponenteActual-=1
                                if ComponenteActual==ComponenteEnsamblar:
                                    gestor.DeclararEnsamble(producto,posicion,True)
                            #if ComponenteActual==ComponenteEnsamblar:
                            #       gestor.DeclararEnsamble(producto,posicion,True)
                        else:
                            
                            ComponenteActual=gestor.ObtenerComponenteActual(producto,posicion)
                            Linea = gestor.RetornarLinea(producto,posicion)
                            gestor.LineaOcupadaTrue(producto,Linea)
                            NodoAnteriorEnsamblado = gestor.PuedeEnsamblar(producto,posicion)
                            if NodoAnteriorEnsamblado ==True:
                                TiempoEnsamble = gestor.ObtenerTiempoEnsambleLinea(Linea)
                                
                                print("Ensamblando componente "+str(ComponenteActual)+" en Linea "+str(Linea)+" DUURACION: "+str(TiempoEnsamble))
                                contadorFila=1 
                                ContadorTiempo+=TiempoEnsamble-1
                                self.tableLineas.setItem(rowPosition,0,QtWidgets.QTableWidgetItem(str(ContadorTiempo)))
                                self.tableLineas.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("Ensamblando Componente "+str(ComponenteActual)))
                                

                                gestor.LineaOcupadaTrue(producto,Linea)
                                gestor.CambiarEstadoEnsamblado(producto,posicion)
                                if posicion == (cantidadListaLineas-1):
                                    TerminoSimulacion = True
                                Ensamblando = True
                            else:
                                print("Linea "+str(Linea)+" No hace nada")
                                self.tableLineas.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("No hace nada "))
                                
                    else:
                        Linea2 = gestor.RetornarLinea(producto,posicion)
                        self.tableLineas.setItem(rowPosition,Linea2,QtWidgets.QTableWidgetItem("No hace nada"))
                        contadorFila=1
                else:
                    Linea2 = gestor.RetornarLinea(producto,posicion)
                    if Linea2!=Linea and gestor.LineaOcupada(producto,posicion)==False:
                        print("Linea "+str(Linea2)+" No hace nada")
                        self.tableLineas.setItem(rowPosition,Linea2,QtWidgets.QTableWidgetItem("No hace nada"))
                        gestor.LineaOcupadaTrue(producto,Linea2)
            
            
            contadorFila=0

        print("Ensamblo el ultimo perro")
        
        self.progressBar.setProperty("value", 100)
        #for i in range(cantidadListaLineas):
        self.tableLineas.resizeColumnsToContents()
        self.lcdNumber.display(str(ContadorTiempo))
        
    def ReporteIndividual(self):
        producto = self.comboProductos.currentText()
        tiempoOptimo    =    int(self.lcdNumber.value())
        headerTableHtml='<th scope="col"> Tiempo en segundos</th>\n'
        for j in range(1,self.tableLineas.columnCount()):
            headerTableHtml+= '<th scope="col"> Linea '+str(j)+'</th>\n'
        contenidoTabla =''
        for i in range(self.tableLineas.rowCount()):
            tiempo = self.tableLineas.item(i,0)
            tiempo = tiempo.text()
            contenidoTabla+='<tr><th scope="row">'+tiempo+'</th>\n'
            for j in range(1,self.tableLineas.columnCount()):
                valor = self.tableLineas.item(i,j)
                if valor is None:
                    valor = ""
                else:
                    valor = valor.text()
                contenidoTabla += '<td>'+valor+'</td>\n' 
            contenidoTabla+='</tr>\n'

        contenidoHTML=(## cuerpo del html
                '<!DOCTYPE html>\n'
                ' <html>\n' 
                '<head> \n'
                '<meta charset="utf-8"> \n'
                '<link href="assets/css/bootstrap-responsive.css" type="text/css" rel="stylesheet">\n'
                '<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" type="text/css" rel="stylesheet">\n'
                '<link rel="stylesheet" type="text/css" href="./CSS/bootstrap.css">\n'
                '<link rel="stylesheet" type="text/css"  href="./CSS/Style.css">'
                '<title>Reporte de '+producto+'</title>\n'
                '</head>\n' 
                '<body>\n'
                '<div class="container-fluid welcome-page" id="home">\n'
                '   <div class="jumbotron">\n'
                '       <h1>\n <span>Tabla de Ensamble de '+producto+'\n</span>\n </h1>\n<p>Tiempo Optimo del Ensamble de '+producto+': '+str(tiempoOptimo)+'</p>\n'
                '</div>\n'
                '</div>\n'
                '<div class="container-fluid " ><div class="jumbotron">'
                '<table class="table">\n'
                '   <thead>\n'
                        '<tr>\n'
                            +headerTableHtml+
                        '</tr>\n'

                    '</thead>\n'
                    '<tbody>\n'
                    +contenidoTabla+
                    '</tbody>\n'
                    '</table>'   
                    '</div>'
                '</div>\n''</body>\n''</html>\n'
            )
            
        fileHtml = open("./HTML/Individual/"+producto+".html","w")##Abre html
        fileHtml.write(contenidoHTML)
        fileHtml.close()
        webbrowser.open("file:///"+os.getcwd()+"/HTML/Individual/"+producto+".html")
        self.SalidaXMLIndividual()
            
    
    def SalidaXMLIndividual(self):
        productoCombo =self.comboProductos.currentText()
        TiempoOptimo = int(self.lcdNumber.value())
        ruta= './Salidas/Salidas Simulacion Individuales/'
        top =  ET.Element("SalidaSimulacion")
        NombreSimulacion = ET.SubElement(top,"Nombre").text="Simulacion de "+self.comboProductos.currentText()
        ListadoProductos = ET.SubElement(top,"ListadoProductos")
        Productoo = ET.SubElement(ListadoProductos,"Producto")
        NombreProducto = ET.SubElement(Productoo,"Nombre").text=productoCombo
        TiempoTotal= ET.SubElement(Productoo,"TiempoTotal").text=str(TiempoOptimo)
        ElaboracionOptima=ET.SubElement(Productoo, "ElaboracionOptima")
        for i in range(self.tableLineas.rowCount()):
            for j in range(self.tableLineas.columnCount()):
                celda = self.tableLineas.item(i,j)
                if celda is not None:
                    valorCelda=celda.text()
                    valorTiempo = self.tableLineas.item(i,0)
                    valorTiempo = valorTiempo.text()
                    Tiempo = ET.SubElement(ElaboracionOptima,'Tiempo', NoSegundo=valorTiempo)
                    Linea = self.tableLineas.verticalHeaderItem(j)
                    LineaEnsamblaje = ET.SubElement(Tiempo,"LineaEnsamblaje").text=valorCelda
        archivo = ET.ElementTree(top)
        archivo.write(ruta+''+productoCombo+".xml")         

    def ReporteCola(self):
        gestor.Cola(self.comboProductos.currentText())
## Seccion masiva

    def addComboMasivo(self):
        num = gestor.TamanoListaProductosSimular
        for i in range(0, num ):
            valor = gestor.addCombo2(i)
            self.comboProductos_2.addItem(valor)
            gestor.SimularProducto(valor)

    def addListaComponentes2(self):
        self.listWidget.clear()
        texto = self.comboProductos_2.currentText()
        if texto != None:
            print("si da rango: "+ str(gestor.cantidadListaComponentes(texto)))
            for i in range(0, gestor.cantidadListaComponentes(texto)):
                valor = gestor.Lista2.addListaComponentes(texto, i)
                self.listWidget_2.addItem('componente '+valor)
        else: 
            print('el combobox esta vacio')

    def addTablaLineas2(self):
        global headerTableHtml
        self.tableLineas2.setColumnCount(gestor.cabeza.CantidadLineas+1)
        texto = self.comboProductos_2.currentText()
        if texto !=None:
            print("si da rango: "+ str(gestor.cantidadListaLineas(texto)))
            self.tableLineas2.setHorizontalHeaderItem(0,QtWidgets.QTableWidgetItem('Tiempo'))
            print("al menos inserta fila    ")
            headerTableHtml = '<th scope="col">Tiempo</th>\n'
                            
            for i in range(0, 1):
                for j in range(1, self.tableLineas2.columnCount()):
                    valor = 'L'+str(j)
                    self.tableLineas2.setHorizontalHeaderItem(j,QtWidgets.QTableWidgetItem(valor))
                print("paso")

    def ActualizarMasivo(self):
        self.listWidget_2.clear()
        self.addListaComponentes2()
        self.addTablaLineas2()
        self.tableLineas2.clearContents()
        self.tableLineas2.setRowCount(0)
        self.lcdNumber_2.display('0')
        self.Simular2()

    def Simular2(self):
        producto = self.comboProductos_2.currentText()
        gestor.DeterminarValoresIniciales(producto)
        cantidadListaLineas = gestor.cantidadListaLineas(producto)
        contadorFila = 0
        TerminoSimulacion=False
        ContadorTiempo = 0
        
        while  TerminoSimulacion ==False:
            Ensamblando=False
            
            for posicion in range(0,cantidadListaLineas):
                if contadorFila == 0:
                    
                    ContadorTiempo+=1
                    rowPosition = self.tableLineas2.rowCount()
                    self.tableLineas2.insertRow(rowPosition)
                    for posicion2 in range(cantidadListaLineas):
                        gestor.LineaOcupadaFalse(producto,gestor.RetornarLinea(producto,posicion2))
                
                
                if Ensamblando==False:
                    Ensamblado = gestor.Ensamblado(producto,posicion)
                    if Ensamblado==False:
                        ComponenteActual = gestor.ObtenerComponenteActual(producto,posicion)
                        ComponenteEnsamblar = gestor.ObtenerComponenteEnsamblar(producto,posicion)
                        Linea = gestor.RetornarLinea(producto,posicion)
                        Ensambla = gestor.Ensambla(producto,posicion)
                        if ComponenteActual==ComponenteEnsamblar:
                            Ensambla=True
                        if Ensambla == False:
                            LineaOcupada = gestor.LineaOcupada(producto,posicion)
                            if ComponenteActual<ComponenteEnsamblar and LineaOcupada!=True:
                                
                                print("Linea "+str(Linea)+" se mueve a componente "+str(ComponenteActual+1))
                                
                                self.tableLineas2.setItem(rowPosition,0,QtWidgets.QTableWidgetItem(str(ContadorTiempo)))
                                self.tableLineas2.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("Se mueve a componente "+str(ComponenteActual+1)))
                                contadorFila=1
                                gestor.DeclararComponenteActual(producto,posicion,1)
                                gestor.LineaOcupadaTrue(producto,Linea)
                                ComponenteActual+=1
                                if (ComponenteActual)==ComponenteEnsamblar:
                                    gestor.DeclararEnsamble(producto,posicion,True)
                            elif(ComponenteActual>ComponenteEnsamblar and gestor.LineaOcupada(producto,posicion)!=True): ##Este else es de si el compA < CompE
                                print("Linea "+str(Linea)+" se mueve a "+str(ComponenteActual-1))
                                self.tableLineas2.setItem(rowPosition,0,QtWidgets.QTableWidgetItem(str(ContadorTiempo)))
                                self.tableLineas2.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("Se mueve a componente "+str(ComponenteActual-1)))
                                contadorFila=1
                                gestor.DeclararComponenteActual(producto,posicion,-1)
                                gestor.LineaOcupadaTrue(producto,Linea)
                                ComponenteActual-=1
                                if ComponenteActual==ComponenteEnsamblar:
                                    gestor.DeclararEnsamble(producto,posicion,True)
                            #if ComponenteActual==ComponenteEnsamblar:
                            #       gestor.DeclararEnsamble(producto,posicion,True)
                        else:
                            
                            ComponenteActual=gestor.ObtenerComponenteActual(producto,posicion)
                            Linea = gestor.RetornarLinea(producto,posicion)
                            gestor.LineaOcupadaTrue(producto,Linea)
                            NodoAnteriorEnsamblado = gestor.PuedeEnsamblar(producto,posicion)
                            if NodoAnteriorEnsamblado ==True:
                                TiempoEnsamble = gestor.ObtenerTiempoEnsambleLinea(Linea)
                                
                                print("Ensamblando componente "+str(ComponenteActual)+" en Linea "+str(Linea)+" DUURACION: "+str(TiempoEnsamble))
                                contadorFila=1 
                                ContadorTiempo+=TiempoEnsamble-1
                                self.tableLineas2.setItem(rowPosition,0,QtWidgets.QTableWidgetItem(str(ContadorTiempo)))
                                self.tableLineas2.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("Ensamblando Componente "+str(ComponenteActual)))
                                

                                gestor.LineaOcupadaTrue(producto,Linea)
                                gestor.CambiarEstadoEnsamblado(producto,posicion)
                                if posicion == (cantidadListaLineas-1):
                                    TerminoSimulacion = True
                                Ensamblando = True
                            else:
                                print("Linea "+str(Linea)+" No hace nada")
                                self.tableLineas2.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("No hace nada "))
                                
                    else:
                        Linea2 = gestor.RetornarLinea(producto,posicion)
                        self.tableLineas2.setItem(rowPosition,Linea2,QtWidgets.QTableWidgetItem("No hace nada"))
                        contadorFila=1
                else:
                    Linea2 = gestor.RetornarLinea(producto,posicion)
                    if Linea2!=Linea and gestor.LineaOcupada(producto,posicion)==False:
                        print("Linea "+str(Linea2)+" No hace nada")
                        self.tableLineas2.setItem(rowPosition,Linea2,QtWidgets.QTableWidgetItem("No hace nada"))
                        gestor.LineaOcupadaTrue(producto,Linea2)
            
            
            contadorFila=0

        print("Ensamblo el ultimo perro")
        
        #for i in range(cantidadListaLineas):
        self.tableLineas2.resizeColumnsToContents()
        self.lcdNumber_2.display(str(ContadorTiempo))
    
    def ReporteMasiva(self):
        producto = self.comboProductos_2.currentText()
        tiempoOptimo    =    int(self.lcdNumber_2.value())
        headerTableHtml='<th scope="col"> Tiempo en segundos</th>\n'
        for j in range(1,self.tableLineas2.columnCount()):
            headerTableHtml+= '<th scope="col"> Linea '+str(j)+'</th>\n'
        contenidoTabla =''
        for i in range(self.tableLineas2.rowCount()):
            tiempo = self.tableLineas2.item(i,0)
            tiempo = tiempo.text()
            contenidoTabla+='<tr><th scope="row">'+tiempo+'</th>\n'
            for j in range(1,self.tableLineas2.columnCount()):
                valor = self.tableLineas2.item(i,j)
                if valor is None:
                    valor = ""
                else:
                    valor = valor.text()
                contenidoTabla += '<td>'+valor+'</td>\n' 
            contenidoTabla+='</tr>\n'

        contenidoHTML=(## cuerpo del html
                '<!DOCTYPE html>\n'
                ' <html>\n' 
                '<head> \n'
                '<meta charset="utf-8"> \n'
                '<link href="assets/css/bootstrap-responsive.css" type="text/css" rel="stylesheet">\n'
                '<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" type="text/css" rel="stylesheet">\n'
                '<link rel="stylesheet" type="text/css" href="./CSS/bootstrap.css">\n'
                '<link rel="stylesheet" type="text/css"  href="./CSS/Style.css">'
                '<title>Reporte de '+producto+'</title>\n'
                '</head>\n' 
                '<body>\n'
                '<div class="container-fluid welcome-page" id="home">\n'
                '   <div class="jumbotron">\n'
                '       <h1>\n <span>Tabla de Ensamble de '+producto+'\n</span>\n </h1>\n<p>Tiempo Optimo del Ensamble de '+producto+': '+str(tiempoOptimo)+'</p>\n'
                '</div>\n'
                '</div>\n'
                '<div class="container-fluid " ><div class="jumbotron">'
                '<table class="table">\n'
                '   <thead>\n'
                        '<tr>\n'
                            +headerTableHtml+
                        '</tr>\n'

                    '</thead>\n'
                    '<tbody>\n'
                    +contenidoTabla+
                    '</tbody>\n'
                    '</table>'   
                    '</div>'
                '</div>\n''</body>\n''</html>\n'
            )
            
        fileHtml = open("./HTML/Masivo/"+producto+".html","w")##Abre html
        fileHtml.write(contenidoHTML)
        fileHtml.close()
        webbrowser.open("file:///"+os.getcwd()+"/HTML/Masivo/"+producto+".html")
    
    def SalidaXMLMasiva(self):
        productoCombo =self.comboProductos_2.currentText()
        TiempoOptimo = int(self.lcdNumber_2.value())
        ruta= './Salidas/Salidas Simulacion Masiva/'
        top =  ET.Element("SalidaSimulacion")
        NombreSimulacion = ET.SubElement(top,"Nombre").text="Simulacion de "+self.comboProductos_2.currentText()
        ListadoProductos = ET.SubElement(top,"ListadoProductos")
        Productoo = ET.SubElement(ListadoProductos,"Producto")
        NombreProducto = ET.SubElement(Productoo,"Nombre").text=productoCombo
        TiempoTotal= ET.SubElement(Productoo,"TiempoTotal").text=str(TiempoOptimo)
        ElaboracionOptima=ET.SubElement(Productoo, "ElaboracionOptima")
        for i in range(self.tableLineas2.rowCount()):
            for j in range(self.tableLineas2.columnCount()):
                celda = self.tableLineas2.item(i,j)
                if celda is not None:
                    valorCelda=celda.text()
                    valorTiempo = self.tableLineas2.item(i,0)
                    valorTiempo = valorTiempo.text()
                    Tiempo = ET.SubElement(ElaboracionOptima,'Tiempo', NoSegundo=valorTiempo)
                    Linea = self.tableLineas2.verticalHeaderItem(j)
                    LineaEnsamblaje = ET.SubElement(Tiempo,"LineaEnsamblaje").text=valorCelda
        archivo = ET.ElementTree(top)
        archivo.write(ruta+''+productoCombo+".xml")   

    