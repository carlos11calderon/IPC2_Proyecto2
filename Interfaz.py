# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Interfaz.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import xml.etree.cElementTree as ET
import time
from ast import Str
from os import linesep, truncate
from GestorSimulacion import GestorSimulacion
from GestorListasSimulaciones import GestorListaSimulacion
from GestorSimulacion import *
from tkinter import Widget
from Gestor import Gestor
from PyQt5 import QtCore, QtGui, QtWidgets
from GestorListaProductosSimular import GestorListaProductosSimular
from GestorListaProductos import GestorListaProductos

gestor = Gestor()
gestor2 = GestorListaProductos()
ges = GestorListaSimulacion()

global headerTableHtml
contadorActualizar = 0 
class Ui_Ensamblador(object):
    def setupUi(self, Ensamblador):
        Ensamblador.setObjectName("Ensamblador")
        Ensamblador.resize(1163, 655)
        Ensamblador.setAnimated(True)
        self.centralwidget = QtWidgets.QWidget(Ensamblador)
        self.centralwidget.setObjectName("centralwidget")
        self.lblProductos = QtWidgets.QLabel(self.centralwidget)
        self.lblProductos.setGeometry(QtCore.QRect(20, 40, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Bodoni MT")
        font.setPointSize(16)
        self.lblProductos.setFont(font)
        self.lblProductos.setObjectName("lblProductos")
        self.comboProductos = QtWidgets.QComboBox(self.centralwidget)
        self.comboProductos.setGeometry(QtCore.QRect(120, 50, 211, 31))
        self.comboProductos.setObjectName("comboProductos")
        self.comboProductos.currentTextChanged.connect(self.Actualizar)
        self.tableLineas = QtWidgets.QTableWidget(self.centralwidget)
        self.tableLineas.setGeometry(QtCore.QRect(370, 80, 781, 421))
        self.tableLineas.setObjectName("tableView")
        self.tableLineas.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableLineas.setDragDropOverwriteMode(False)
        self.tableLineas.verticalHeader().setVisible(False)
        self.tableLineas.horizontalHeader().setDefaultAlignment(QtCore.Qt.AlignmentFlag.AlignCenter|QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(10, 530, 551, 51))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(50, 150, 256, 341))
        self.listWidget.setObjectName("listWidget")
        self.lblTabla = QtWidgets.QLabel(self.centralwidget)
        self.lblTabla.setGeometry(QtCore.QRect(660, 20, 201, 41))
        self.btnSimular = QtWidgets.QPushButton(self.centralwidget)
        self.btnSimular.setGeometry(QtCore.QRect(400,20,121,51))
        self.btnSimular.setObjectName("Simular")
        self.btnSimular.clicked.connect(self.Simular2)

        self.btnReporteHTML = QtWidgets.QPushButton(self.centralwidget)
        self.btnReporteHTML.setGeometry(QtCore.QRect(1000,20,121,51))
        self.btnReporteHTML.setObjectName("ReporteHtml")
        self.btnReporteHTML.clicked.connect(self.ReporteIndividual)
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblTabla.setFont(font)
        self.lblTabla.setObjectName("lblTabla")
        self.lblComponentes = QtWidgets.QLabel(self.centralwidget)
        self.lblComponentes.setGeometry(QtCore.QRect(60, 100, 231, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblComponentes.setFont(font)
        self.lblComponentes.setObjectName("lblComponentes")
        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(930, 530, 171, 61))
        self.lcdNumber.setObjectName("lcdNumber")
        self.lblTiempoEnsamble = QtWidgets.QLabel(self.centralwidget)
        self.lblTiempoEnsamble.setGeometry(QtCore.QRect(630, 540, 311, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lblTiempoEnsamble.setFont(font)
        self.lblTiempoEnsamble.setObjectName("lblTiempoEnsamble")
        self.segundos = QtWidgets.QLabel(self.centralwidget)
        self.segundos.setGeometry(QtCore.QRect(1110, 560, 21, 41))
        font = QtGui.QFont()
        font.setFamily("Bookman Old Style")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.segundos.setFont(font)
        self.segundos.setObjectName("segundos")
        Ensamblador.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Ensamblador)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1163, 21))
        self.menubar.setObjectName("menubar")
        self.menuOpciones = QtWidgets.QMenu(self.menubar)
        self.menuOpciones.setObjectName("menuOpciones")
        self.menuArchivo = QtWidgets.QMenu(self.menubar)
        self.menuArchivo.setObjectName("menuArchivo")
        self.menuSalir = QtWidgets.QMenu(self.menubar)
        self.menuSalir.setObjectName("menuSalir")
        Ensamblador.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Ensamblador)
        self.statusbar.setObjectName("statusbar")
        Ensamblador.setStatusBar(self.statusbar)
        self.actionActualizar = QtWidgets.QAction(Ensamblador)
        self.actionActualizar.setObjectName("actionActualizar")
        self.actionActualizar.triggered.connect(self.Actualizar)
        self.actionLimpiar = QtWidgets.QAction(Ensamblador)
        self.actionLimpiar.setObjectName("actionLimpiar")
        self.actionCargar_Maquina = QtWidgets.QAction(Ensamblador)
        self.actionCargar_Maquina.setObjectName("actionCargar_Maquina")
        self.actionCargar_Simulacion = QtWidgets.QAction(Ensamblador)
        self.actionCargar_Simulacion.setObjectName("actionCargar_Simulacion")
        self.actionSalida_Simulacion = QtWidgets.QAction(Ensamblador)
        self.actionSalida_Simulacion.setObjectName("actionSalida_Simulacion")
        self.actionReporte_Simulacion_HTML = QtWidgets.QAction(Ensamblador)
        self.actionReporte_Simulacion_HTML.setObjectName("actionReporte_Simulacion_HTML")
        self.actionReporte_de_secuencia = QtWidgets.QAction(Ensamblador)
        self.actionReporte_de_secuencia.setObjectName("actionReporte_de_secuencia")
        self.menuOpciones.addAction(self.actionActualizar)
        self.menuOpciones.addAction(self.actionLimpiar)
        self.menuArchivo.addAction(self.actionCargar_Maquina)
        self.menuArchivo.addAction(self.actionCargar_Simulacion)
        self.menuArchivo.addAction(self.actionSalida_Simulacion)
        self.menuArchivo.addAction(self.actionReporte_Simulacion_HTML)
        self.menuArchivo.addAction(self.actionReporte_de_secuencia)
        self.menubar.addAction(self.menuArchivo.menuAction())
        self.menubar.addAction(self.menuOpciones.menuAction())
        self.menubar.addAction(self.menuSalir.menuAction())
        self.actionCargar_Maquina.triggered.connect(gestor.CargarArchivoConfig)
        self.actionCargar_Maquina.triggered.connect(self.addCombo)
        self.actionCargar_Simulacion.triggered.connect(gestor.CargarArchivoSimulacion)
        #self.actionLimpiar.triggered.connect()
        self.retranslateUi(Ensamblador)
        QtCore.QMetaObject.connectSlotsByName(Ensamblador)

    def retranslateUi(self, Ensamblador):
        _translate = QtCore.QCoreApplication.translate
        Ensamblador.setWindowTitle(_translate("Ensamblador", "Ensamblador"))
        self.lblProductos.setText(_translate("Ensamblador", "Productos:"))
        self.lblTabla.setText(_translate("Ensamblador", "Tabla de Simulación"))
        self.lblComponentes.setText(_translate("Ensamblador", "Componentes a utilizar"))
        self.lblTiempoEnsamble.setText(_translate("Ensamblador", "Tiempo óptimo de ensamblaje: "))
        self.segundos.setText(_translate("Ensamblador", "S"))
        self.menuOpciones.setTitle(_translate("Ensamblador", "Opciones"))
        self.menuArchivo.setTitle(_translate("Ensamblador", "Archivo"))
        self.menuSalir.setTitle(_translate("Ensamblador", "Salir"))
        self.actionActualizar.setText(_translate("Ensamblador", "Actualizar"))
        self.actionLimpiar.setText(_translate("Ensamblador", "Limpiar Interfaz"))
        self.actionCargar_Maquina.setText(_translate("Ensamblador", "Cargar Maquina"))
        self.actionCargar_Simulacion.setText(_translate("Ensamblador", "Cargar Simulacion"))
        self.actionSalida_Simulacion.setText(_translate("Ensamblador", "Salida Simulacion"))
        self.actionReporte_Simulacion_HTML.setText(_translate("Ensamblador", "Reporte Simulacion HTML"))
        self.actionReporte_de_secuencia.setText(_translate("Ensamblador", "Reporte de secuencia"))
        self.btnSimular.setText(_translate("Ensamblador", "Simular"))
        self.btnReporteHTML.setText(_translate("Ensamblador", "Reporte Html"))

    def Actualizar(self):
        global contadorActualizar
        self.addListaComponentes()
        self.addTablaLineas()
        self.addTablaLineas()
        self.tableLineas.clearContents()
        self.tableLineas.setRowCount(0)
        self.progressBar.setProperty('value',0)
        self.lcdNumber.display('0')

    def addCombo(self):
        #print(len(gestor2.cabeza))
        for i in range(0, gestor.TamanoListaProductosMaquina+1):
            valor = gestor.addCombo(i)
            self.comboProductos.addItem(valor)


    def addListaComponentes(self):
        self.listWidget.clear()
        texto = self.comboProductos.currentText()
        if texto != None:
            print("si da rango: "+ str(gestor.cantidadListaComponentes(texto)))
            for i in range(0, gestor.cantidadListaComponentes(texto)):
                valor = gestor.Lista2.addListaComponentes(texto, i)
                self.listWidget.addItem('componente '+valor)
        else: 
            print('el combobox esta vacio')
    
    
    def addTablaLineas(self):
        global headerTableHtml
        self.tableLineas.setColumnCount(gestor.cabeza.CantidadLineas+1)
        texto = self.comboProductos.currentText()
        if texto !=None:
            print("si da rango: "+ str(gestor.cantidadListaLineas(texto)))
            self.tableLineas.setHorizontalHeaderItem(0,QtWidgets.QTableWidgetItem('Tiempo'))
            print("al menos inserta fila    ")
            headerTableHtml = '<th scope="col">Tiempo</th>\n'
                            
            for i in range(0, 1):
                for j in range(1, self.tableLineas.columnCount()):
                    valor = 'L'+str(j)
                    self.tableLineas.setHorizontalHeaderItem(j,QtWidgets.QTableWidgetItem(valor))
                print("paso")
                   
             
            
    def Simular2(self):
        
        producto = self.comboProductos.currentText()
        
        
        gestor.SimularProducto(producto)
        cantidadListaLineas = gestor.cantidadListaLineas(producto)
        contadorFila = 0
        TerminoSimulacion=False
        ContadorTiempo = 0
        self.progressBar.setProperty("value", 50)
        time.sleep(1.1)
        while  TerminoSimulacion ==False:
            Ensamblando=False
            
            for posicion in range(cantidadListaLineas):
                if contadorFila == 0:
                    
                    ContadorTiempo+=1
                    rowPosition = self.tableLineas.rowCount()
                    self.tableLineas.insertRow(rowPosition)
                    for posicion2 in range(cantidadListaLineas):
                        gestor.LineaOcupadaFalse(producto,gestor.RetornarLinea(producto,posicion2))
                
                
                if Ensamblando==False:
                    Ensamblado = gestor.Ensamblado(producto,posicion)
                    if Ensamblado==False:
                        ComponenteActual = gestor.ObtenerComponenteActual(producto,posicion)
                        ComponenteEnsamblar = gestor.ObtenerComponenteEnsamblar(producto,posicion)
                        Linea = gestor.RetornarLinea(producto,posicion)
                        Ensambla = gestor.Ensambla(producto,posicion)
                        if ComponenteActual==ComponenteEnsamblar:
                            Ensambla=True
                        if Ensambla == False:
                            LineaOcupada = gestor.LineaOcupada(producto,posicion)
                            if ComponenteActual<ComponenteEnsamblar and LineaOcupada!=True:
                                
                                print("Linea "+str(Linea)+" se mueve a componente "+str(ComponenteActual+1))
                                
                                self.tableLineas.setItem(rowPosition,0,QtWidgets.QTableWidgetItem(str(ContadorTiempo)))
                                self.tableLineas.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("Se mueve a componente "+str(ComponenteActual+1)))
                                contadorFila=1
                                gestor.DeclararComponenteActual(producto,posicion,1)
                                gestor.LineaOcupadaTrue(producto,Linea)
                                ComponenteActual+=1
                                if (ComponenteActual)==ComponenteEnsamblar:
                                    gestor.DeclararEnsamble(producto,posicion,True)
                            elif(ComponenteActual>ComponenteEnsamblar and gestor.LineaOcupada(producto,posicion)!=True): ##Este else es de si el compA < CompE
                                print("Linea "+str(Linea)+" se mueve a "+str(ComponenteActual-1))
                                self.tableLineas.setItem(rowPosition,0,QtWidgets.QTableWidgetItem(str(ContadorTiempo)))
                                self.tableLineas.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("Se mueve a componente "+str(ComponenteActual-1)))
                                contadorFila=1
                                gestor.DeclararComponenteActual(producto,posicion,-1)
                                gestor.LineaOcupadaTrue(producto,Linea)
                                ComponenteActual-=1
                                if ComponenteActual==ComponenteEnsamblar:
                                    gestor.DeclararEnsamble(producto,posicion,True)
                            #if ComponenteActual==ComponenteEnsamblar:
                            #       gestor.DeclararEnsamble(producto,posicion,True)
                        else:
                            
                            ComponenteActual=gestor.ObtenerComponenteActual(producto,posicion)
                            Linea = gestor.RetornarLinea(producto,posicion)
                            gestor.LineaOcupadaTrue(producto,Linea)
                            NodoAnteriorEnsamblado = gestor.PuedeEnsamblar(producto,posicion)
                            if NodoAnteriorEnsamblado ==True:
                                TiempoEnsamble = gestor.ObtenerTiempoEnsambleLinea(Linea)
                                
                                print("Ensamblando componente "+str(ComponenteActual)+" en Linea "+str(Linea)+" DUURACION: "+str(TiempoEnsamble))
                                contadorFila=1 
                                ContadorTiempo+=TiempoEnsamble-1
                                self.tableLineas.setItem(rowPosition,0,QtWidgets.QTableWidgetItem(str(ContadorTiempo)))
                                self.tableLineas.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("Ensamblando Componente "+str(ComponenteActual)))
                                

                                gestor.LineaOcupadaTrue(producto,Linea)
                                gestor.CambiarEstadoEnsamblado(producto,posicion)
                                if posicion == (cantidadListaLineas-1):
                                    TerminoSimulacion = True
                                Ensamblando = True
                            else:
                                print("Linea "+str(Linea)+" No hace nada")
                                self.tableLineas.setItem(rowPosition,Linea,QtWidgets.QTableWidgetItem("No hace nada "))
                                
                    else:
                        Linea2 = gestor.RetornarLinea(producto,posicion)
                        self.tableLineas.setItem(rowPosition,Linea2,QtWidgets.QTableWidgetItem("No hace nada"))
                        contadorFila=1
                else:
                    Linea2 = gestor.RetornarLinea(producto,posicion)
                    if Linea2!=Linea and gestor.LineaOcupada(producto,posicion)==False:
                        print("Linea "+str(Linea2)+" No hace nada")
                        self.tableLineas.setItem(rowPosition,Linea2,QtWidgets.QTableWidgetItem("No hace nada"))
                        gestor.LineaOcupadaTrue(producto,Linea2)
            
            
            contadorFila=0

        print("Ensamblo el ultimo perro")
        
        self.progressBar.setProperty("value", 100)
        #for i in range(cantidadListaLineas):
        self.tableLineas.resizeColumnsToContents()
        self.lcdNumber.display(str(ContadorTiempo))
        
    def ReporteIndividual(self):
        producto = self.comboProductos.currentText()
        tiempoOptimo    =    int(self.lcdNumber.value())
        headerTableHtml='<th scope="col"> Tiempo en segundos</th>\n'
        for j in range(1,self.tableLineas.columnCount()):
            headerTableHtml+= '<th scope="col"> Linea '+str(j)+'</th>\n'
        contenidoTabla =''
        for i in range(self.tableLineas.rowCount()):
            tiempo = self.tableLineas.item(i,0)
            tiempo = tiempo.text()
            contenidoTabla+='<tr><th scope="row">'+tiempo+'</th>\n'
            for j in range(1,self.tableLineas.columnCount()):
                valor = self.tableLineas.item(i,j)
                if valor is None:
                    valor = ""
                else:
                    valor = valor.text()
                contenidoTabla += '<td>'+valor+'</td>\n' 
            contenidoTabla+='</tr>\n'

        contenidoHTML=(## cuerpo del html
                '<!DOCTYPE html>\n'
                ' <html>\n' 
                '<head> \n'
                '<meta charset="utf-8"> \n'
                '<link href="assets/css/bootstrap-responsive.css" type="text/css" rel="stylesheet">\n'
                '<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" type="text/css" rel="stylesheet">\n'
                '<link rel="stylesheet" type="text/css" href="./CSS/bootstrap.css">\n'
                '<link rel="stylesheet" type="text/css"  href="./CSS/Style.css">'
                '<title>Reporte de '+producto+'</title>\n'
                '</head>\n' 
                '<body>\n'
                '<div class="container-fluid welcome-page" id="home">\n'
                '   <div class="jumbotron">\n'
                '       <h1>\n <span>Tabla de Ensamble de'+producto+'\n</span>\n </h1>\n<p>Tiempo Optimo del Ensamble de '+producto+': '+str(tiempoOptimo)+'</p>\n'
                '</div>\n'
                '</div>\n'
                '<div class="container-fluid " ><div class="jumbotron">'
                '<table class="table">\n'
                '   <thead>\n'
                        '<tr>\n'
                            +headerTableHtml+
                        '</tr>\n'

                    '</thead>\n'
                    '<tbody>\n'
                    +contenidoTabla+
                    '</tbody>\n'
                    '</table>'   
                    '</div>'
                '</div>\n''</body>\n''</html>\n'
            )
            
        fileHtml = open("./HTML/Individual/"+producto+".html","w")##Abre html
        fileHtml.write(contenidoHTML)
        fileHtml.close()
        self.SalidaXMLIndividual()    
    
    def SalidaXMLIndividual(self):
        productoCombo =self.comboProductos.currentText()
        TiempoOptimo = int(self.lcdNumber.value())
        ruta= './Salidas Simulacion Individuales/'
        top =  ET.Element("SalidaSimulacion")
        NombreSimulacion = ET.SubElement(top,"Nombre").text="Simulacion de "+self.comboProductos.currentText()
        ListadoProductos = ET.SubElement(top,"ListadoProductos")
        Productoo = ET.SubElement(ListadoProductos,"Producto")
        NombreProducto = ET.SubElement(Productoo,"Nombre").text=productoCombo
        TiempoTotal= ET.SubElement(Productoo,"TiempoTotal").text=str(TiempoOptimo)
        ElaboracionOptima=ET.SubElement(Productoo, "ElaboracionOptima")
        for i in range(self.tableLineas.rowCount()):
            for j in range(self.tableLineas.columnCount()):
                celda = self.tableLineas.item(i,j)
                if celda is not None:
                    valorCelda=celda.text()
                    valorTiempo = self.tableLineas.item(i,0)
                    valorTiempo = valorTiempo.text()
                    Tiempo = ET.SubElement(ElaboracionOptima,'Tiempo', NoSegundo=valorTiempo)
                    Linea = self.tableLineas.verticalHeaderItem(j)
                    LineaEnsamblaje = ET.SubElement(Tiempo,"LineaEnsamblaje").text=valorCelda
        archivo = ET.ElementTree(top)
        archivo.write(ruta+''+productoCombo+".xml")         


        